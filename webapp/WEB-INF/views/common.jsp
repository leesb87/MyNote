
<!-- ================================================================================= -->
<!-- JSP 기술의 한 종류인 [Page Directive]를 이용하여 현 JSP 페이지 처리 방식 선언하기 -->
<!-- ================================================================================= -->
<!-- 현재 이 JSP 페이지 실행 후 생성되는 문서는 HTML이고, 이 문서 안의 데이터는 UTF-8 방식을 인코딩한다라고 설정함 -->
<!-- 현재 이 JSP 페이지는 UTF-8 방식으로 인코딩 한다. -->
<!-- UTF-8 인코딩 방식은 한글을 포함한 전 세계 모든 문자열을 부호화할 수 있는 방법이다. -->
<%@page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>

<!-- ================================================================================= -->
<!-- JSP 페이지에서 사용할 [사용자 정의 태그]의 한 종류인 [JSTL의 C코어 태그]를 사용하겠다고 선언하기-->
<!-- 아래 코딩이 있어야 JSTL을 사용할 수 있다. -->
<!--
-->
<!-- ================================================================================= -->
<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>

<%-- 
 //-----------------------------------------------------------------------------------------
 	 ==================================================================================
	 [JSTL 커스텀 태그]를 사용하여 HttpSession 객체에 키값으로 데이터를 저장하기
	 ========================================
	  <c:set var="키값" value="데이터" scope="session"/>
	  ----------------------------------------------------------
	  위의 [JSTL 커스텀 태그] 코드를 자바 문법으로 표현하면 아래와 같다.
	  <% session.setAttribute("키값", "데이터"); %> 
	 
	 ==================================================================================
	 [JSTL 커스텀 태그]를 사용하여 HttpSession 객체에 키값으로 저장된 데이터를 꺼내기
	 ========================================  
	  ${sessionScope.키값}
	  
 //-----------------------------------------------------------------------------------------
 	 ==================================================================================
	 [JSTL 커스텀 태그]를 사용하여 HttpServletRequest 객체에 키값으로 데이터를 저장하기
	 ========================================
	  <c:set var="키값" value="데이터" scope="request"/>
	  ----------------------------------------------------------
	  위의 [JSTL 커스텀 태그] 코드를 자바 문법으로 표현하면 아래와 같다.
	  <% request.setAttribute("bodyBgcolor", "#EBF5EF"); %> 
	  
 	 ==================================================================================
	 [JSTL 커스텀 태그]를 사용하여 HttpServletRequest 객체에 키값으로 저장된 데이터를 꺼내기
	 ========================================  
	  ${requestScope.키값}
	  ${키값}
	  
 //-----------------------------------------------------------------------------------------	
	 ==================================================================================	 
	 [JSTL 커스텀 태그]를 사용하여 HttpServletRequest 객체에 키값 "bodyBgcolor"로 문자 "#EBF5EF" 를 저장하기
	 var= 키값, value 데이터, scope은 범위로 저장되는 위치 의미  scope="request"는 생략해도 무방하다
	 ================================================================================== --%>
	 <c:set var="bodyBgcolor" value="#EBF5EF" scope="request"/>
	 
<!-- 
	==================================================================================	
    [JSTL 커스텀 태그]를 사용하여 HttpServletRequest 객체에 키값 "thBgColor"로 문자 "#BEDEE8" 를 저장하기
	==================================================================================	
 --> <c:set var="thBgColor" value="#BEDEE8" scope="request"/>

<!-- 
	==================================================================================	
	[JSTL 커스텀 태그]를 사용하여 HttpServletRequest 객체에 키값 "contextroot"로 문자 "/z_spring" 를 저장하기
    context root가 지속적으로 반복이 되어 나중에 변경될 경우를 고려해, 자카코드로 빼서 한번에 변경처리 될 수 있도록 처리
    request.getContextPath()쓰면 현재 프로젝트 이름이 들어간다. z_spring
	==================================================================================	
 --> <c:set var="croot" value="<%=request.getContextPath()%>" scope="request"/>
 
 <!-- 
	==================================================================================	
	[JSTL 커스텀 태그]를 사용하여 HttpServletRequest 객체에 키값 "randomNum"로 문자 "<%-- <%Math.random();%> --%>" 를 저장하기
    context root가 지속적으로 반복이 되어 나중에 변경될 경우를 고려해, 자카코드로 빼서 한번에 변경처리 될 수 있도록 처리
	==================================================================================	
 --> <c:set var="randomNum" value="<%Math.random();%>" scope="request"/>

<!-- ================================================================================= -->
<!-- JSP 페이지에서 사용할 [자바스크립트 파일],[CSS 파일] 수입하기 -->
<!-- ================================================================================= -->
<!-- ------------------------------------------------------------- -->
<!-- JSP 페이지에서 사용할 [사용자 정의 CSS],[JQuery API] 수입-->
<!-- ------------------------------------------------------------- -->
<link href="${requestScope.croot}/resources/common.css?ver=${requestScope.randomNum}" rel="stylesheet" type="text/css">
<script src="${requestScope.croot}/resources/jquery-1.11.0.min.js" type="text/javascript"></script>  

<%-- 	?ver=<%Math.random();%>를 사용하기 전, common.js 파일을 업데이트 하게 된다면, 
	이전에 수입해왔던 것을 그대로 수입해왔기 때문에, 일부러 랜덤한 url주소를 만들어 주어,
	새로 읽어 들이게 하는 방법이다.
	랜덤으로 매개변수를 보내면서 같은 위치의 주소가 아니게 만들어 새롭게 읽어들이게 만드는 방법이다.
	프로젝트가 완성이 되면 나중에 지우는것이 좋다.
 --%>
<script src="${requestScope.croot}/resources/common.js?ver=${requestScope.randomNum}" type="text/javascript"></script>  

