
/*
***입사문제 ***

===============================================================
<문1>
-- [웹서버]와 [웹브라우저]는 서로 무엇을 주고 받습니까?
===============================================================
	------------------------------------------------
	[웹브라우저] --> 요청메세지 -------> 
					<------- 응답메세지 <-- [웹서버]
	------------------------------------------------
	# 요청메세지 안에 구성요소
**중요	--> 파라미터명-파라미터값( 파라미터값은 Client가 생성한 데이터로 웹서버에서 DB연동할 때 주로 사용)
		--> 쿠키명 - 쿠키값		 ( 쿠키값은 이전에 웹서버가 나에게 보내준 아주 작은 데이터)
		--> 헤더명 - 헤더값		 ( 헤더값은 웹브라우저의 정보를 의미)
	
	# 응답메세지 안에 구성요소
**중요	--> html 소스			 (주로 DB연동의 결과물이 포함된 HTML 소스)
		--> 쿠키명 - 쿠키값		 (웹서버가 만들어서 Client에게 임시 저장해두라고 전달해 주는 값--why? 어느 Client의 것인지 더 빠른인지 가능)
		--> 헤더명 - 헤더값		 (웹서버가 만든 HTML 소스의 주변 정보)
		
===============================================================
<문2>
-- [웹브라우저]가 URL 주소로 [웹서버]에 접근할 때, 
-- [웹서버] 내부에서는 무슨 일이 벌어지나요?
-- 단, 스프링 프레임 워크를 사용한다는 조건입니다.
===============================================================
	<1> [웹브라우저]가 /xxx.do  형태의 URL 주소로 [웹서버]에 접근
	
	<2> Controller 클래스 내부의 @RequestMapping(value="/xxx.do") 가 붙어있는 메소드를 호출
		--> (컨트롤러 클래스 머리에는 @Controller 라는 anotation이 붙어 있다.)
		--> @RequestMapping(value="/xxx.do") 가 붙어있는 메소드에 매개변수로는 아래와 같은 데이터가 들어온다.
		   ----------------------------------------------------------------
		   // DTO클래스명 매개변수명 
		   // 		=> DTO 객체의 메위주가 매개변수로 들어옴
		   // 		=> DTO 객체 속성변수 안에 파라미터값이 들어간다.
		   //		=> 이 때, 파라미터명이 속성변수명과 일치해야한다. 파라미터값은 DB연동할 때 사용한다. SQL문에 참여
		   //		=> 파라미터명은 속성변수명/ 클라이언트쪽 입력양식의 NAME값/ 오라클에 있는 COLUMN명과 일치한다.
		   //       => 파라미터값이 많을 경우 사용
		   ----------------------------------------------------------------
		   // @RequestParam(value="파라미터명") 자료형 매개변수명
		   //    	=> 파라미터명에 해당하는 파라미터값을 매개변수에 저장되어 들어옴
		   //   	=> 파라미터값이 많지 않을 경우 사용
		   ----------------------------------------------------------------
		   // HttpServletRequest request (요청메세지 관리)
		   //		=> HttpServletRequest 객체의 메위주가 매개변수 request에 저장됨
		   //		=> 즉, HttpServletRequest 객체의 메소드를 호출하고 싶으면 이렇게 매개변수 선언
		   // 		=> 상기 처럼 파라미터값을 가져오기 위해 사용되진 않는다...그렇다면 주된 용도는? 
		   //       => 뒤에서 알려주신다고함...
		   ----------------------------------------------------------------
		   // HttpServletResponse response (응답메세지 관리)
		   //		=> HttpServletResponse 객체의 메위주가 매개변수 response에 저장됨
		   //		=> 즉, HttpServletResponse 객체의 메소드를 호출하고 싶으면 이렇게 매개변수 선언
		   //       => 특히, 쿠키를 저장하려고 쓴다고 생각한다.
		   ----------------------------------------------------------------
	*** 입사문제 target ***		   
		   // HttpSession session
		   //		=> HttpSession 객체의 메위주가 매개변수 session에 저장됨
		   //		=> 즉, HttpSession 객체의 메소드를 호출하고 싶으면 이렇게 매개변수 선언
		   ----------------------------------------------------------------
		   * 클라이언트가 서버에 접속하면 생성되는 3가지
		   HttpServletRequest/ HttpSession/ HttpServletResponse
		   
		   * 클라이언트에게 응답메세지를 보내고나면 사라지는 2가지
		   HttpServletRequest/ HttpServletResponse
		   
		   * HttpSession 는 안사라지고 살아있으며, 재접속하면 다시 맞이한다. 언제 사라지는가?
		     클라이언트가 들어오면 고유아이디가 생성되서 쿠키값에 저장되게 된다.
		     응답메세지를 보낼 때, 포함되서 보내지고 재 접속시 다시 사용하게 되는 것이다. 
			 웹브라우저 종료를 해야 사라진다.
			(다른 데에 접속했다가 해당 사이트로 재 접속하는 것은 고유아이디가 살아있는데 웹브라우저를 종료하면 재 로그인을 해야한다.)
		   
		   		
	<3> 메소드 내부에서 [DB연동한 결과물]과 [호출할 jsp 페이지명]을 ModelAndView 객체 안에 저장 후, 해당 객체 리턴
			=> ModelAndView 객체에 저장된 [DB연동한 결과물]은 HttpServletRequest 객체에도 저장이 된다.
			---------------------------------------------------------
			=> ModelAndView 객체에 [DB연동한 결과물] 저장하는 방법
			   addObject("키값", DB연동한 결과물 ) 메소드 호출로 저장
			---------------------------------------------------------
			=> ModelAndView 객체에 [호출할 jsp 페이지명] 저장하는 방법
			   setViewName(호출할  JSP 페이지명) 메소드 호출로 저장
	
	<4> ModelAndView 객체에 저장된 JSP 페이지를 호출하면서 [DB 연동한 결과물]을 반영하여 HTML 소스를 생성
			--------------------------------------------------
			=> JSP 페이지에서 [DB 연동한 결과물]을 EL 로 꺼내는 방법(현재 많이 사용하는 방법)
				${requestScope.키값}
				${키값}  // requestScope생략가능 (누구의 것인지 알기 어려워짐..)
			--------------------------------------------------
			=> 현재 쓰이지는 않지만, 자바로도 [DB 연동한 결과물]을 꺼내는 방법
				<% (자료형으로형변환)request.getAttribute("키값") %>
			--------------------------------------------------	
			* jsp 페이지에는 java가 없어야한다. 
			  why? null값처리와 형변환의 문제가 있으며, 하나의 에러가 나면 화면 전체가 안보이게 되기 때문이다.
			  
	<5> [응답메세지]를 만들어 HTML 소스, 쿠키명-쿠키값, 헤더명-헤더값 들을 저장
	
	<6> [응답메세지]를 Client에게 전송
	
	<7> Client는 응답메세지에 저장된 HTML소스를 실행하여 웹 브라우저에 출력

--+ 추가
(무조건 DB연동하지 않고, 비동식방식으로 바로 리턴해주기도 한다)	
===============================================================
<문3> ***입사문제 ***
-- HttpServletRequest 객체는 무엇을 하나요?
===============================================================
	-----------------------------------
	 HttpServletRequest 객체 생명주기
	-----------------------------------
		=> [웹브라우저]가 /xxx.do  형태의 URL 주소로 [웹서버]에 접속하면 [웹서버]에서 자동 생성하는 객체
		
		=> [웹서버]가 [응답메세지]를 전송하고 나면 제거된다.(1회성 객체)
	
	-----------------------------
	HttpServletRequest 의 주 기능
	-----------------------------	   
	=> 역할: [요청메세지]안의 정보를 관리리턴/ 현 웹서버의 정보를 관리/ HttpSession 객체를 리턴 하는 등의 역할담당
		
		----------------------------------------------
		<1> [요청메세지] 안 의 파라미터 값 정보를 리턴
		----------------------------------------------
		요청메세지에 저장된 파라미터값 리턴 (주 사용기능)
			------------------------
			+ 자바 코드로 파라미터값 꺼내는 방법
				request.getParameter("파라미터명")  	--> checkbox가 아닌 입력양식의 문자열 파라미터값 꺼낼 경우
				request.getParameterValues("파라미터명")--> checkbox 입력양식의 파라미터값들이 저장된 배열 꺼낼 경우
			------------------------
			+ EL 코드로 파라미터값 꺼내는 방법
				${param.파라미터명}  					--> checkbox가 아닌 입력양식의 문자열 파라미터값 꺼낼 경우
				${paramValues.파라미터명)				--> checkbox 입력양식의 파라미터값들이 저장된 배열 꺼낼 경우
		
		----------------------------------------------
		<2> DB 연동 결과물을 저장 (마치 HashMap 객체의 기능과 비슷)
		----------------------------------------------
		HttpServletRequest의 setAttribute("키값",DB연동데이터) 메소드로 DB연동 결과물을 저장
		HttpServletRequest의 setAttribute("키값",DB연동데이터) 메소드로 DB연동 결과물을 꺼내는 방법
			-----------------------------
			+ 자바 코드로 DB 연동 결과물 꺼내는 방법
				 	request.getAttribute("키값")
			-----------------------------
			+ EL 코드로 DB 연동 결과물 꺼내는 방법
					${requestScope.키값} 
		----------------------------------------------			
		<3> 웹서버의 주요 정보를 리턴한다.
		----------------------------------------------
			웹서버의 포트번호
			접속 URL 주소
			접속 URI 주소 
			contextRoor명(= /프로젝트명)
		----------------------------------------------
		<4> HttpSession 객체의 메위주를 리턴한다.
		----------------------------------------------
		// 이것을 리턴받는 다양한 방법이 있어 굳이 이 것을 사용하지는 않는다.
		----------------------------------------------
		<5> 기타 등등
		----------------------------------------------
		
--+ 추가		
${requestScope.키값}--> 키값은 HttpServletRequest의 setAttribute("키값명",DB연동데이터) 메소드로 저장된 것(주로DB연동 결과물)을 꺼낼 때
					--> 키값은 ModelAndView 객체에 addObject("키값명", DB연동데이터) 메소드로 저장된 DB연동데이터 꺼낼 때

===============================================================
<문4> 
-- HttpServletResponse 객체는 무슨 역할을 하나요?
===============================================================
		=> 클라이언트에게 전송할 응답메세지를 관리한다.
		
		-----------------------------------
		 HttpServletResponse 객체 생명주기
		-----------------------------------
		=> [웹브라우저]가 /xxx.do  형태의 URL 주소로 [웹서버]에 접속하면 [웹서버]에서 자동 생성하는 객체
	
		=> [웹서버]가 [응답메세지]를 전송하고 나면 제거된다. (1회성 객체)
		
	--------------------------------
	 HttpServletResponse 의 주 기능
	--------------------------------
		
		<1> 응답메세지에 쿠키를 저장 (주기능)
		// 응답메세지는 Client의 웹브라우저로 전송된다
		
		<2> Client에게 임의의 URL 주소로 재 접속하게 한다.
			예) response.sendRedirect(URL주소);
			
		<3> 기타 등등
		
===============================================================
<문5> ***입사문제 ***
-- HttpSession 객체는 무슨 역할을 하나요?
===============================================================
		---------------------------
		 HttpSession 객체 생명주기
		---------------------------
		 <1> [웹브라우저]가 URL 주소로 [웹서버]에 접근하면 웹서버 족에 HttpSession 객체가 생성된다.
		 	 이 때, HttpSession 객체는 고유 아이디를 소유한다.
		 
		 <2> 웹서버 쪽에서 필요에 의해 HttpSession 객체에 데이터를 저장한다.(주로 DB연동 데이터)
		 
		 <3> [응답메세지]에 쿠키값으로 고유아이디를 저장해서 [응답메세지]를 Client에게 전송
		 	 결국, Client 의 웹브라우저는 [고유아이디]를 쿠키값으로 소유하게 된다.
		     [응답메세지]를 Client에게 전송 후에도 HttpSession 객체는 제거되지 않고 살아있다.
		     
		 <4> [웹브라우저]가 동일한 URL 주소로 [웹서버]에 재 접근할 때,
		     요청 메세지 안에는 [고유아이디]를 가진 쿠키값이 요청메세지로 전달하게 된다.
	
		 <5> 처음 접속시 HttpSession 객체에 저장한 데이터를 꺼낸다.
		 	 이 때,  HttpSession 객체는 Client에서 보내온 [고유아이디]와 동일한 [고유아이디]를 가진 이전에 생성된 HttpSession 객체이다.
	
		 <6> 만약 Client가 [고유아이디]를 못 가지고 접속하거나 웹서버쪽에서 [고유아이디]를 가진 HttpSession 객체가 제거된다면,
		     새로운 HttpSession 객체가 생성이된다. 
		     
		     + Client가 고유아이디를 잃어버리는 경우는 웹브라우저 종료후 재 접속이다.
		     + 재 접속 다시 꺼내 보려는 데이터는 HttpSession객체에 저장하면 된다.
		     + 고유아이디 확인하는 방법 HttpSession.getID하면 된다.
		     + 고유아이디가 저장된 쿠키는 파일로 저장되어 있지 않고 메모리에 저장되어 있다.
		     + 일반 쿠키는 파일로 저장된다.
		     
		 결국, HttpSession 객체의 역할은 재 접속해서 꺼내보고 싶은 데이터가 있을 경우 사용한다.
		 
		 	예) 로그인 성공 후, 아이디를 맡겨놓고 재 접속할 때마다 꺼내어 이전에 로그인을 한 id인지 확인한다. 그러면 로그인이 유지됨. 
	 			쇼핑몰에서 페이지 이동하면서 고른 상품을 결제 화면에서 같이 볼 수 있게 하는 경우
	 			회원가입시 페이지를 이동하면서 입력양식에 적어야하는 경우에도 나중에 저장 버튼을 누르면 한번에 저장된다.
	 			
	        + 재 접속할 때마다 계속 볼려고 하는 것은 오라클에 저장하는게 맞고, 잠시 사용하는 용도는 HttpSession 객체를 사용한다. 
			+ 간단한 작은 용량이 아닌 객체는 쿠키로 보낼 수 없다. HttpSession을 사용한다
	
		--------------------------------------------------------------------
		 HttpSession 객체에 데이터를 저장하는 방법
		--------------------------------------------------------------------	
			session.setAttribute("키값", 저장데이터);
			
		--------------------------------------------------------------------
		 HttpSession 객체에 저장된 데이터를 JSP 페이지에서 꺼내는 EL로 방법
		--------------------------------------------------------------------
			${sessionScope.키값}
			${키값}    
	
===============================================================
<문5>
-- EL 이 무엇인가요? 언어가 아닌 기술이다.
===============================================================	
		------------------------------
		  JSP 6대 기술 중의 하나이다.
		------------------------------	
			=> ModelAndView 객체 OR HttpServletRequest 객체 OR HttpSession 객체에 키값으로 저장된 데이터를
			   JSP 페이지에 표현하는데 사용된다.
			   
		--------------------------------------------------------------------
		 ModelAndView 객체 OR HttpServletRequest 객체에 키값으로 저장된 데이터를 꺼내는 방법
		--------------------------------------------------------------------
			=> ${requestScope.키값}
			   ${키값}
		--------------------------------------------------------------------
		 HttpSession 객체에 키값으로 저장된 데이터를 꺼내는 방법
		--------------------------------------------------------------------	
			=> ${sessiontScope.키값}
			   ${키값}
			   
	    * 만약 ${키값}이 있다면 HttpSession 객체를 먼저 뒤지고 없으면 HttpServletRequest 객체를 뒤진다.
	    * 개발자는 저 두개에 저장된 것이 겹치지 않게 해야한다. 		   
		
		------------------------------
		 EL 의 연산자 
		------------------------------	
			${empty 키값} 
			--> empty는 키값에 해당하는 데이터가 null || 길이가 없는 경우 true를 리턴하는 연산자
			--> true를 리턴하는 경우
			    null or ""(문자열길이가 0)인 경우, 비어있는 배열/HashMap/ArrayList 객체일 경우
			    <주의> 숫자 0 은 false 리턴
			
			${!empty 키값}--> empty 의 결과값을 반대로 바꾼다. (true-->false) 
			
			<비교연산자>
			<  또는 lt				  --> 오른쪽이 크면 true 리턴
			>  또는 gt				  --> 왼쪽이 크면 true 리턴
			/  또는 div				  --> 나눈 후에 몫을 리턴
			%  또는 mod				  --> 나눈 후에 나머지 리턴
			<= 또는 le				  --> 오른쪽이 같거나 크면 true 리턴
			>= 또는 ge				  --> 왼쪽이 같거나 크면 true 리턴
			!  또는 not 			  --> 오른쪽이 true면 false로 false면 true로 바꾸는 반전연산자 
			
			and 또는 && / or 또는 ||  --> JAVA의 && || 와 동일 
			비교연산식?데이터:데이터  --> JAVA와 동일한 삼항연산자
 			
 			== != + = * 등은 자바와 동일
 			
		--------------------------------------------------------------------
		 만약 EL 로 꺼낸 데이터가 문자||숫자가 아닌 ArrayList || 배열 이라면
		 커스텀태그(=JSTL) 와 어울려 데이터를 표현해야한다.
		--------------------------------------------------------------------			
		* EL은 JSP 페이지에서 표현의 목적을 갖고 있지, 반복문이나 조건문 같은 것은 커스텀 태그가 하는 것이다. 
					
			
--+ 추가 
<% 자바문법 %>는 JSP 6대 기술 중의 하나로서 JSP Scriptlet 이라고 부른다.

	
===============================================================
<문7>
-- JSTL 이 무엇인가요? 
===============================================================		
		------------------------------
		 사용자 정의 태그(=custom tag) 중의 하나이다.
		------------------------------	
			=> 자카르타라는 단체에서 만든 사용자 정의태그이다.
			=> 사용자 정의 태그란 표현은 HTML 태그 형태로 표현하되 실행될 때는 자바 코드로 바뀌어 실행된다.	
		
		------------------------------
		 JSTL 의 조건문 형태
		------------------------------	
		<1>	
			<c:if test="${true or false를 리턴하는 비교/논리연산식}">
				
				실행코드
			</c:if>
			----------------------------------------
			▶ EL 연산식이 true 실행코드를 실행한다.
			▶<주의> test=" ${~} " 처럼 EL 앞 OR 뒤에 공백이 있으면 무조건 false를 리턴. error!!
			
		<2>	
			----------------------------------------
			<c:choose >
					<c:when test="${true or false를 리턴하는 EL 비교/논리연산식}">
				
						실행구문1
					</c:when>
					
					~
					
					<c:otherwise>
					
						실행구문2
					</c:otherwise>
			</c:choose>
			----------------------------------------
			▶ EL 의 비교/ 논리연산식이 true 면 [실행구문1] 실행, 아니면 [실행구문2]를 실행
			▶ <c:when test="${EL 의 비교연산식 or 논리연산식}"> ~ </c:when>는 1개 이상이 올 수 있다.
	
		------------------------------
		 JSTL 의 반복문 형태
		------------------------------
		<1>
			----------------------------------------
			<c:forEach var="변수명" begin="시작번호" end="끝번호" step="증감숫자"> 경우에 따라 varStatus="LoopTagStatus객체참조변수명"추가 사용 가능
					실행구문
			</c:forEach>
			----------------------------------------
			▶ [변수]에 [시작번호]부터 저장해서 [증감숫자] 대로 증가하면서 변수<=끝번호 조건까지 실행구문을 반복

			----------------------------------------
			<c:forEach var="no" begin="1" end="5" step="1">
					${no}<br>
			</c:forEach>
			----------------------------------------
			▶ 1~5까지 찍는다

		<2>
			----------------------------------------
			<c:forEach var="xxx" items="${requestScope.List 객체 또는 배열이 저장된 키값}" varStatus="LoopTagStatus객체참조변수명">
					실행구문
			</c:forEach>
			----------------------------------------
			▶ ${requestScope.List 객체 또는 배열이 저장된 키값} 로 리턴되는 [배열]이나 [List] 객체에 저장된 데이터를
			   차례대로 하나씩 변수 xxx에 저장해 실행구문을 반복 실행한다.
			   
			▶ ${requestScope.List 객체 또는 배열이 저장된 키값} 대신 ${sessionScope.List객체 또는 배열이 저장된 키값} 이 삽입될 수 있다.
			
			▶ LoopTagStatus 객체의 속성변수 호출방법
				${LoopTagStatus객체참조변수명.index}  	 => [반복문] 실행 횟수의 [인덱스 번호] 리턴/ 처음 반복시 0 리턴
				${LoopTagStatus객체참조변수명.count}  	 =>	[반복문] 실행 횟수의 [순서 번호] 리턴/ 처음 반복시 1 리턴
				${LoopTagStatus객체참조변수명.begin}	 => begin 속성값 리턴
				${LoopTagStatus객체참조변수명.end} 	 	 => end 속성값 리턴
				${LoopTagStatus객체참조변수명.step} 	 => step 속성값 리턴
				${LoopTagStatus객체참조변수명.first} 	 => [반복문] 실행이 첫 번째 실행인 경우 true 리턴 
				${LoopTagStatus객체참조변수명.last} 	 => [반복문] 실행이 마지막 실행인 경우 true 리턴 
				${LoopTagStatus객체참조변수명.current} 	 => 현재 실행 [반복문]에서 사용하는 변수명에 저장된 객체 리턴
		
			
===============================================================
<문8>
-- 자바스크립트에서 $(document).ready(function(){ 실행구문 }); 코드의 의미는?
===============================================================		
		=>  실행구문은 body 태그를 다 읽어 들여 실행 후 실행되는 자스 코딩이다.
		--------------------------------------------------------
		=> 실행구문은 주로 아래와 같다.
		
			- 태그에 걸린 이벤트 설정 코딩. 즉, 태그에 이벤트가 발생하면 실행될 구문.
			- DB 연동 결과물을 입력 양식 관련 태그의 value 값으로 삽입할 때
			- DB 연동 결과물을 div 태그 or span 태그 or  td/td 등의 태그 내부에 삽입할 때
			- body 태그를 다 읽어 들여 실행 후 실행해야하는 함수 호출할 때 등등
		--------------------------------------------------------
		 $(document).ready(function(){ 실행구문 }); 대체 코드
		--------------------------------------------------------
			<script>
				function xxx(){
					실행구문
				}
			</script>
			<body onLoad="xxx()">

===============================================================
<문9>
-- 자바스크립트에서 아래 코드의 의미는?
===============================================================		
	var xxx = $(".xxx").val();
	--------------------------
	▶ class=xxx를 가진 입력 양식 태그의 value 값을 가져다 자스 변수 xxx에 저장하라
	
	▶ 이 value 값은 웹브라우저에 클라이언트가 입력 or 선택한 값
	
	▶ Client 가 입력 or 선택한 값의 유효성 체크가 주 목적
	
===============================================================
<문10>
-- 자바스크립트에서 아래 코드의 의미는?
===============================================================		
	var xxx = $(".xxx .yyy").val();
	
	var xxx = $(".xxx").find(".yyy").val();  동일한 코드
	--------------------------
	▶ class=xxx 를 가진 태그의 후손 중에 class=yyy를 가진 태그이 value값을 가져다가 
	   자스 변수 xxx에 저장하라 의미
	   
===============================================================
<문11>
-- 자바스크립트에서 아래 코드의 의미는?
===============================================================		
	var xxx = $(".xxx").html();
	--------------------------
	▶ class=xxx 를 가진 태그의 내부의 html 코딩을 그대로 문자형태로 리턴하여 변수 xxx에 저장
	   
===============================================================
<문12>
-- 자바스크립트에서 아래 코드의 의미는?
===============================================================		
	var xxx = $(".xxx").text();
	--------------------------
	▶ class=xxx 를 가진 태그의 내부의 html 코딩의 결과인 브라우저에 출력된 값을 문자로 리턴하여 변수 xxx에 저장 
 	▶ 내부의 html 코딩은 문자로 리턴되지 않음

===============================================================
<문13>
-- 자바스크립트에서 아래 코드의 의미는?
===============================================================		
	var xxx = $(".xxx").html("<div>안녕</div>");
	--------------------------
	▶ class=xxx 를 가진 태그의 내부에 <div>안녕</div> 덮어씌워 삽입
	▶ html 태그 까지 그대로 삽입

===============================================================
<문14>
-- 자바스크립트에서 아래 코드의 의미는?
===============================================================		
	var xxx = $(".xxx").text("안녕");
	--------------------------
	▶ class=xxx 를 가진 태그의 내부에 안녕 덮어씌워 삽입
	▶ 문자만 그대로 삽입 즉, 태그를 넣을 경우 역할을 못한다. 태그도 문자화된다.
	
	
===============================================================
<문15>
-- html 아래 코드의 의미는?
===============================================================	
	------------------------------------------------	
	<form name="xxx" method="post" action="/yyy.do">
	  ~
	</form>
	------------------------------------------------
		▶ document.xxx.submit() 메소드 호출시 일어나는 일
			<1> 웹서버에 "/yyy.do"라는 URL 주소로 접속한다.
			
			<2> form 태그 내부의 입력양식의 name 값을 파라미터명, value 값을 파라미터값으로 
				파라미터명과 값을 서버로 전송하게 된다.
				
			<3> post 방식으로 웹서버에 접속하므로 파라미터명과 파라미터값은 URL 주소 뒤에 달려 가지 않고 전송됨.
	
===============================================================
<문16>
-- BoardController.java 에서 나오는 아래 코드의 의미는?
===============================================================		
	------------------------------------------------
		@RequestMapping( value="/boardList.do")
		
		public ModelAndView getBoardList(
				BoardSearchDTO boardSearchDTO
				, HttpSession session
		) {
				~
		}
	------------------------------------------------
		<1>
		▶ [] 은 생략 가능을 의미함.
		▶ Client가 http://도메인주소[:포트번호]/[프로젝트명]/boardList.do 로 끝나는 URL 주소로 접속 할때 호출되는 메소드	
		▶ 연습하는 입장에서는 http://localhost:8089/z_spring/boardList.do 로 접속할 때 호출되는 메소드 왈.
		<2>
		▶ 매개변수로 들어오는 BoardSearchDTO boardSearchDTO 의 의미
		▶ 매개변수로 BoardSearchDTO 객체가 들어온다. BoardSearchDTO 객체의 생성은 SpringFrameWork에서 해준다.
		▶ BoardSearchDTO 객체의 속성변수에 파라미터값이 저장된 상태로 들어온다.
		   (즉, 다량의 파라미터 값이 들어오는 것과 같다.)
		   (단, 속성변수명과 파라미터명이 일치해야 SpringFrameWork에서 속성변수의 setter 메소드를 호출하여 속성변수에 파라미터 값을 저장시킨다.)		
		   <주의> 파라미터명이 없는 경우의 속성변수는 setter 메소드가 작동하지 않는다.
		   + DTO는 다량의 파라미터값을 쉽게 받아 올 경우 사용된다.
		   + 속성변수는 private이기 때문에 setter로만 저장할 수 있다.
		<3>
		▶ 매개변수로 들어오는 HttpSession session 의 의미
		▶ Client 가 처음 접속할 때 생성했던 HttpSession 객체를 SpringFrameWork가 찾아 매개변수로 들어오게한다.
		▶ HttpSession 객체는 이전에 접속시 저장했던 데이터를 가지고 있다면, 다시 꺼낼 수 있게 된다.
		   (즉, 재 접속시 이전에 저장한 데이터가 있다면 다시 꺼내 사용할 수 있다.)
		   (HttpSession 객체가 매개변수로 들어오면 이전 접속시 저장한 데이터를 꺼내기 위한 것이다.)
		▶ 만약 Client가 웹서버에 처음 접속하는 경우, (Browser를 껏다 다시접속 or 일정한 시간 경과 후 접속)
		   에는 HttpSession 객체는 새롭게 생성하여 매개변수로 들어온다.
		<4>
		▶ 이 메소드의 리턴형 ModelAndView 는 무엇을 의미?
			ModelAndView 객체는 아래 2가지를 가지고 있다.
			- 해당 메소드가 끝난 후, 호출할 예정인 jsp 명을 가지고 있다.
			- 키 값을 DB 연동 결과물을 붙어서 가지고 있다.
			(이 DB연동 결과물은 자동으로 HttpServletRequest 객체에도 저장된다.)
			
			이 메소드가 끝나면 ModelAndView 객체가 가진 JSP 가 호출되고, 
			JSP 내부에 HttpServletRequest 객체가 가진 DB 연동 결과물을 JSP에서 반영하여 HTML 이 생성됨.
			결국, Client에게 JSP 가 실행된 결과인 HTML 이 응답메세지에 담아 전송된다.
		
===============================================================
<문17>
-- BoardController.java 에서 나오는 아래 코드의 의미는?
===============================================================	
	-----------------------------------------------------------------------
		@RequestMapping( value="/loginProc.do"
							 , method=RequestMethod.POST
							 , produces="application/json;charset=UTF-8")
		@ResponseBody
		public int getAdminIdCnt(
				@RequestParam( value="admin_id") String admin_id
				,@RequestParam( value="pwd", required=true) String pwd
				,@RequestParam( value="is_login" , required=false) String is_login
				,HttpSession session
				,HttpServletResponse response
		) {
				~
		}	
	-----------------------------------------------------------------------
		<1>
		▶ [] 은 생략 가능을 의미함.
		▶ Client가 http://도메인주소[:포트번호]/[프로젝트명]/loginProc.do 로 끝나는 URL 주소로 접속 할때 호출되는 메소드	
		▶ 연습하는 입장에서는 http://localhost:8089/z_spring/loginProc.do 로 접속할 때 호출되는 메소드 왈.
		<2>
		▶ @ResponseBody 의 해석
			메소드의 리턴값이 Client로 바로 전송이 된다.
			즉, Client 쪽으로 html이 아닌 리턴값이 바로 전송된다고 보면된다.
			비동기 방식으로 접속이다.
		<3>
		▶ 매개변수 @RequestParam( value="admin_id") String admin_id 의 해석
			파라미터명이 admin_id 인 파라미터값을 매개변수 admin_id 에 저장해서 들어온다.
			<주의> 단, 파라미터 값이 없다면 에러가 발생한다.
			(즉, 무조건 파라미터값은 들어와야한다. 없으면, 매개변수 쪽에서 에러가 나서 메소드 내부의 코드가 실행이 되지 않는다.)
			
			만약, 파라미터값이 안들어와도 에러 발생없이 원하는 default값이라도 들어게 하려면?		
			@RequestParam( value="admin_id" required=false , defaultValue="디폴트값") String admin_id 으로 한다.

===============================================================
<문18>
-- LoginController.java 에서 나오는 아래 메소드 안의 코딩이 실행이 되지 않는 경우의 이유는?
===============================================================	
	------------------------------------------------
		@RequestMapping( 
				value="/boardRegProc.do"
				,method=RequestMethod.POST
				,produces="application/json;charset=UTF-8"
		)
		@ResponseBody
		public Map<String,String> insertBoard(
			BoardDTO boardDTO
		) {
			System.out.println(1);
				~
		}
	------------------------------------------------
		▶ BoardDTO 객체 안의 속성변수에 값을 저장할 때, error가 발생했기 때문이다.
		▶ 매개변수 안의 객체가 자료형 등 파라미터 값이 맞지 않는 다는 뜻으로 가장 우선적으로 매개변수를 확인해야한다.
		
		▶ 이런 경우는 파라미턴 값이 DTO 객체의 속성변수에 저장 될 때, 에러가 발생한 경우이다.
			예) 속성변수 b_no 가 int 자료형을 가지고 있는데, 저장되는 데이터는 null일 경우,
				int 자료형 변수에 null이 저장될 수 는 없어 error가 발생
				그래서 어떤 사이트에서는 이런 error를 미연에 방지하기 위해 int 형이 저장되는 속성변수도 String으로 하는 경우가 있다.

===============================================================
<문19>  JS 문제
-- JS에서 다량의 데이터를 관리하는 방법은?
===============================================================
		Array 객체로 관리
		------------------------------------------------
		Array 객체 생성 방법
			var xxx = new Array();
			var xxx = [];
		------------------------------------------------
		Array 객체의 다량의 데이터를 저장하는 방법
			xxx.push(데이터);
			xxx[index number] = 데이터;
		------------------------------------------------
			
===============================================================
<문20>  JS 문제
-- JS에서 n행 m열의 데이터를 관리하는 방법은?
===============================================================
		Array 객체로 관리한다.
		
		<1> Array 객체에 n행 m열의 데이터를 저장하기
		------------------------------------------------
		var boardList = new Array();
		boardList.push( 
			{
				"b_no":1
				,"subject":"가"
				,"writer":"나"
				,"content":"다"
				,"reg_date":"2021-01-01"
				,"readcount":3
			} 
		);
		boardList.push( 
			{
				"b_no":2
				,"subject":"가"
				,"writer":"나"
				,"content":"다"
				,"reg_date":"2021-01-03"
				,"readcount":3
			} 
		);
		<2> Array 객체에 n행 m열의 데이터를 꺼내기
		json을 여러군데 넣으면 n행 m열이 되는 거죠
		------------------------------------------------
		for( var i=0; i<boardList.length; i++ ){
			document.write( boardList[i].b_no );
			document.write( boardList[i].subject );
			document.write( boardList[i].writer );
			document.write( boardList[i].content );
			document.write( boardList[i].reg_date );
			document.write( boardList[i].readcount );
		}		

===============================================================
<문21>  JS 문제
-- 하기 코딩을 분석하면?
===============================================================

		------------------------------------------------
			var xxx = function(zzz){~};
		------------------------------------------------
		문법적으로,
		▶ xxx 는 변수, function(zzz){~}는 익명함수
		
		   즉, 변수 xxx에는 익명함수가 저장된 형태
		   직역하자면, 함수가 선언된 것이다.
		  	
		아래와 거의 같은 형태이다.
		------------------------------------------------
			function xxx(zzz){~};
		------------------------------------------------
		
		호출 방법(형식)
		▶ xxx(데이터)
		
===============================================================
<문22>  JS 문제
-- 하기 코딩에서 에러가 발생하는가?
===============================================================

		------------------------------------------------
			var arr = new Array(1,2,3);
			
			document.write(arr.ddd);
		------------------------------------------------
		
		▶ 존재하지 않은 속성변수를 호출하면 error가 나는가?
			
		   정답: error가 없다..!
		   JS는 존재하지 않는 속성변수를 호출하면 error가 발생하지 않고, 
		   undefined가 출력된다.
		   (undefined란? 해당 데이터는 값을 모르겠다는 포기의 의미이다.)
		   
		   but, JAVA라면 존재하지 않는 속성변수 호출할 경우 명백한 ERROR가 발생한다. 
		   Java에서는 능동적으로 철저한 문법체크를 하기 때문이다.
		   
		   JS는 HTML을 도와서 화면에 출력될 수 있도록 도와주는 것이기 때문에 과한 에러는 좋지 않기 때문이고, 
		   Java는 데이터를 관리해야하는 것이기 때문에 철저한 문법체크를 해야 차후 error를 미연에 방지할 수 있다.

===============================================================
<문23>  JS 문제
-- 하기 코딩에서 에러가 발생하는가?
===============================================================

		------------------------------------------------
			function xxx(zzz){
				var num = 99;
				var num = 88;
				document.write( num );
			}
		------------------------------------------------
		▶ error가 발생하지 않음 88이 값으로 출력됨.
		
		but, Java에서는 같은 {} 블럭 내에서 동일한 변수를 2개 이상 선언하는 에러이지만, 
		JS에서는 에러가 나지 않는다.
		
		why? JS는 변수에 대한 문법적 집착이 없기 때문이다. 
			 문법적으로 좀더 Loosely하다. 
			 변수에 대한 자료형 구문이 없음.
		그래서 최근에 나온 언어들은 자료형에 대한 민감성이 덜하다.
		python도 변수에 대한 집착이 덜하다 

===============================================================
<문24>  JSP 문제
-- JSP 페이지에서 나오는 아래 코딩의 의미는?
===============================================================
		------------------------------------------------
		 <c:set var="xxx" value="123" scope="request"/>
		------------------------------------------------
		사용자 정의 태그 중의 하나로서 자카르타 JSTL이다.
		JSP 페이지에서만 나올 수 있는 사용자 정의 태그
		
		HttpServletRequest 객체에 키값 "xxx" 로 "123"을 저장하라는 의미.
		
		만약, Java 영역, Java의 Controller Class에서는 아래와 같은 기능의 코딩이다.
		request.setAttribute("xxx","123");
		
		만약,  <c:set var="xxx" value="123" scope="request"/> 가 실행된 후,
		HttpServletRequest 객체에 키값 "xxx"에 저장된 데이터를 JSP 페이지에서 꺼낼 경우 아래처럼 한다.
		${requestScope.xxx}
		
===============================================================
<문25>  JSP 문제
-- JSP 페이지에서 나오는 아래 코딩의 의미는?
===============================================================		
		------------------------------------------------
		 <c:set var="xxx" value="123" scope="session"/>
		------------------------------------------------	
		사용자 정의 태그 중의 하나로서 자카르타 JSTL이다.
		JSP 페이지에서만 나올 수 있는 사용자 정의 태그
		
		HttpSession 객체에 키값 "xxx" 로 "123"을 저장하라는 의미.
		
		만약, Java 영역, Java의 Controller Class에서는 아래와 같은 기능의 코딩이다.
		session.setAttribute("xxx","123");
		
		<c:set var="xxx" value="123" scope="session"/>가 실행 된 후,
		HttpSession 객체에 키값 "xxx"에 저장된 데이터를 JSP 페이지에서 꺼낼 경우 아래 처럼 한다.
		${sessionScope.xxx}
		
===============================================================
<문26>  JSP 문제
-- JSP 페이지에서 나오는 아래 코딩의 의미는?
===============================================================
		------------------------------------------------
		 ${sessionScope.xxx}
		------------------------------------------------
		▶ HttpServletRequest 객체에 키값 "xxx" 에 저장된 데이터를 JSP 페이지에서 꺼내어 html 소스 
		사이 or Javascript 사이에 삽입시킨다.

===============================================================
<문27>  html 문제
-- html 페이지에서 나오는 아래 코딩의 의미는?
===============================================================	

		------------------------------------------------
		 <form name="regForm" action="/regProc.do" enctype="multipart/form=data">
		 	~
		 </form>
		------------------------------------------------
		▶ 서버에 /regProc.do URL 주소로 접속
		
		▶ form 태그 안에는 <input type=file ~> 가 있을 것이다. 
		   즉, 파일을 보내려면 enctype="multipart/form-data"가 있어야한다. 
		   만약, enctype="multipart/form-data"가 없다면, form 태그 안의 입력 양식의 value값의 문자열만 서버로 넘어간다.
		   있느냐 없느냐에 따라 보내지는 것이 다른 것이다.
		
		▶ form 태그 안의 입력양식의 value 값이나 파일이 전송되는데, get 방식으로 전송된다.
		   method ="~" 속성이 지정되지 않으면 default 값으로 method="get"이 된다.
		
		▶ 서버에 /regProc.do URL 주소로 접속하려면 아래 코드가 실행되어야한다.
		   document.regForm.submit(); 동기방식(page 변환)









